var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { jsx as _jsx } from "react/jsx-runtime";
/* eslint-disable import/no-extraneous-dependencies */
import React from "react";
import ReactDOM from "react-dom";
import Blockly from "blockly";
import { BlocklyWorkspace } from "./index";
import ConfigFiles from "./initContent/content";
var TestEditor = function () {
    var _a = React.useState(ConfigFiles.INITIAL_TOOLBOX_JSON), toolboxConfiguration = _a[0], setToolboxConfiguration = _a[1];
    React.useEffect(function () {
        window.setTimeout(function () {
            setToolboxConfiguration(function (prevConfig) { return (__assign(__assign({}, prevConfig), { contents: __spreadArray(__spreadArray([], prevConfig.contents, true), [
                    {
                        kind: "category",
                        name: "Dynamically added category",
                        contents: [
                            { kind: "block", type: "text" },
                            {
                                kind: "block",
                                blockxml: '<block type="text_print"><value name="TEXT"><shadow type="text">abc</shadow></value></block>',
                            },
                        ],
                    },
                ], false) })); });
        }, 2000);
        window.setTimeout(function () {
            setToolboxConfiguration(function (prevConfig) { return (__assign(__assign({}, prevConfig), { contents: __spreadArray(__spreadArray([], prevConfig.contents.slice(0, prevConfig.contents.length - 1), true), [
                    __assign(__assign({}, prevConfig.contents[prevConfig.contents.length - 1]), { contents: [{ kind: "block", type: "text" }] }),
                ], false) })); });
        }, 4000);
        window.setTimeout(function () {
            setToolboxConfiguration(function (prevConfig) { return (__assign(__assign({}, prevConfig), { contents: __spreadArray([], prevConfig.contents.slice(0, prevConfig.contents.length - 1), true) })); });
        }, 10000);
    }, []);
    var onWorkspaceChange = React.useCallback(function (workspace) {
        workspace.registerButtonCallback("myFirstButtonPressed", function () {
            alert("button is pressed");
        });
        var newXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));
        document.getElementById("generated-xml").innerText = newXml;
        //@ts-ignore
        var code = Blockly.JavaScript.workspaceToCode(workspace);
        //@ts-ignore
        document.getElementById("code").value = code;
    }, []);
    var onXmlChange = React.useCallback(function (newXml) {
        document.getElementById("generated-xml").innerText = newXml;
    }, []);
    return (_jsx(BlocklyWorkspace, { toolboxConfiguration: toolboxConfiguration, workspaceConfiguration: {
            grid: {
                spacing: 20,
                length: 3,
                colour: "#ccc",
                snap: true,
            },
        }, initialXml: ConfigFiles.INITIAL_XML, className: "fill-height", onWorkspaceChange: onWorkspaceChange, onXmlChange: onXmlChange }, void 0));
};
window.addEventListener("load", function () {
    var editor = React.createElement(TestEditor);
    ReactDOM.render(editor, document.getElementById("blockly"));
});
