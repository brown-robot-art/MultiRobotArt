import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import PropTypes from "prop-types";
import useBlocklyWorkspace from "./useBlocklyWorkspace";
var propTypes = {
    initialXml: PropTypes.string,
    toolboxConfiguration: PropTypes.object,
    workspaceConfiguration: PropTypes.object,
    className: PropTypes.string,
    onWorkspaceChange: PropTypes.func,
    onImportXmlError: PropTypes.func,
    onXmlChange: PropTypes.func,
    onInject: PropTypes.func,
    onDispose: PropTypes.func,
};
var defaultProps = {
    initialXml: null,
    toolboxConfiguration: null,
    workspaceConfiguration: null,
    className: null,
    onWorkspaceChange: null,
    onImportXmlError: null,
    onXmlChange: null,
    onInject: null,
    onDispose: null,
};
function BlocklyWorkspace(_a) {
    var initialXml = _a.initialXml, toolboxConfiguration = _a.toolboxConfiguration, workspaceConfiguration = _a.workspaceConfiguration, className = _a.className, onWorkspaceChange = _a.onWorkspaceChange, onXmlChange = _a.onXmlChange, onImportXmlError = _a.onImportXmlError, onInject = _a.onInject, onDispose = _a.onDispose;
    var editorDiv = React.useRef(null);
    var xml = useBlocklyWorkspace({
        ref: editorDiv,
        initialXml: initialXml,
        toolboxConfiguration: toolboxConfiguration,
        workspaceConfiguration: workspaceConfiguration,
        onWorkspaceChange: onWorkspaceChange,
        onImportXmlError: onImportXmlError,
        onInject: onInject,
        onDispose: onDispose,
    }).xml;
    var onXmlChangeRef = React.useRef(onXmlChange);
    React.useEffect(function () {
        onXmlChangeRef.current = onXmlChange;
    }, [onXmlChange]);
    React.useEffect(function () {
        if (onXmlChangeRef.current && xml) {
            onXmlChangeRef.current(xml);
        }
    }, [xml]);
    return _jsx("div", { className: className, ref: editorDiv }, void 0);
}
BlocklyWorkspace.propTypes = propTypes;
BlocklyWorkspace.defaultProps = defaultProps;
export default BlocklyWorkspace;
